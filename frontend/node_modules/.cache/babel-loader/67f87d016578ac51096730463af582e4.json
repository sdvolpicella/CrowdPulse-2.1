{"ast":null,"code":"import _classCallCheck from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\giovt\\\\Desktop\\\\crowdpulse old\\\\CrowdPulse\\\\frontend\\\\src\\\\components\\\\Filters\\\\SearchText.js\";\nimport React from 'react';\nimport ReactTags from 'react-tag-autocomplete';\nimport './css/searchbar.css';\nimport axios from 'axios'; //https://www.npmjs.com/package/react-tag-autocomplete\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar SearchText = /*#__PURE__*/function (_React$Component) {\n  _inherits(SearchText, _React$Component);\n\n  var _super = _createSuper(SearchText);\n\n  function SearchText(props) {\n    var _this;\n\n    _classCallCheck(this, SearchText);\n\n    _this = _super.call(this, props);\n\n    _this.getText = function () {\n      var i = 1;\n      var j = 0;\n      var temp;\n      var strings = [];\n      /*\r\n      const data = this.props.allText.data;\r\n      //var temp =data[0]._id.processed_text[0].split(\" \")\r\n      \r\n      var tempSuggestion = []\r\n         while(i<data.length){\r\n        j=0;\r\n        \r\n        if(data[i]._id!==undefined&&data[i]._id!==null){\r\n         \r\n        while(j<data[i]._id.processed_text.length){\r\n          \r\n          temp=data[i]._id.processed_text[j].split(\" \")\r\n            if(strings.indexOf(temp[0])==-1){\r\n            tempSuggestion.push({\r\n              id:0,\r\n              name: temp[0]      \r\n            });\r\n            strings.push(temp[0]);\r\n          }\r\n              j++;\r\n        }\r\n      }\r\n            i++;\r\n      }\r\n      \r\n      \n      this.state.suggestions = tempSuggestion\r\n      this.setState({suggestions: tempSuggestion})        \r\n             */\n\n      _this.reactTags = /*#__PURE__*/React.createRef();\n    };\n\n    _this.sendData = function (text) {\n      _this.props.parentCallback(text);\n    };\n\n    _this.sendData = _this.sendData.bind(_assertThisInitialized(_this));\n    _this.state = {\n      text: [],\n      suggestions: []\n    };\n\n    _this.getText();\n\n    return _this;\n  }\n\n  _createClass(SearchText, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.mongodb !== this.props.mongodb) {\n        this.getText();\n      }\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(i) {\n      var text = this.state.text.slice(0);\n      text.splice(i, 1);\n      this.setState({\n        text: text\n      });\n      this.sendData(text);\n    }\n  }, {\n    key: \"onAddition\",\n    value: function onAddition(tag) {\n      var text = [].concat(this.state.text, tag);\n      this.setState({\n        text: text\n      });\n      this.sendData(text);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(ReactTags, {\n        placeholderText: \"Add new Text\",\n        ref: this.reactTags,\n        tags: this.state.text,\n        suggestions: this.state.suggestions,\n        onDelete: this.onDelete.bind(this),\n        onAddition: this.onAddition.bind(this),\n        allowNew: true,\n        classNames: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return SearchText;\n}(React.Component);\n\nexport default SearchText;","map":{"version":3,"sources":["C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/src/components/Filters/SearchText.js"],"names":["React","ReactTags","axios","SearchText","props","getText","i","j","temp","strings","reactTags","createRef","sendData","text","parentCallback","bind","state","suggestions","prevProps","mongodb","slice","splice","setState","tag","concat","onDelete","onAddition","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,qBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;;;IACMC,U;;;;;AACJ,sBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;;AADkB,UAepBC,OAfoB,GAeV,YAAM;AACd,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,IAAJ;AACA,UAAIC,OAAO,GAAG,EAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,YAAKC,SAAL,gBAAiBV,KAAK,CAACW,SAAN,EAAjB;AACG,KAzDmB;;AAAA,UAkEpBC,QAlEoB,GAkET,UAACC,IAAD,EAAS;AAClB,YAAKT,KAAL,CAAWU,cAAX,CAA0BD,IAA1B;AACD,KApEmB;;AAElB,UAAKD,QAAL,GAAgB,MAAKA,QAAL,CAAcG,IAAd,+BAAhB;AACA,UAAKC,KAAL,GAAa;AACXH,MAAAA,IAAI,EAAE,EADK;AAGXI,MAAAA,WAAW,EAAE;AAHF,KAAb;;AAQA,UAAKZ,OAAL;;AAXkB;AAanB;;;;WA8CD,4BAAmBa,SAAnB,EAA8B;AAC5B,UAAGA,SAAS,CAACC,OAAV,KAAoB,KAAKf,KAAL,CAAWe,OAAlC,EAA0C;AACxC,aAAKd,OAAL;AACD;AAEF;;;WAMD,kBAAUC,CAAV,EAAa;AACX,UAAMO,IAAI,GAAG,KAAKG,KAAL,CAAWH,IAAX,CAAgBO,KAAhB,CAAsB,CAAtB,CAAb;AACAP,MAAAA,IAAI,CAACQ,MAAL,CAAYf,CAAZ,EAAe,CAAf;AACA,WAAKgB,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAJA;AAAF,OAAd;AACA,WAAKD,QAAL,CAAcC,IAAd;AACD;;;WAED,oBAAYU,GAAZ,EAAiB;AACf,UAAMV,IAAI,GAAG,GAAGW,MAAH,CAAU,KAAKR,KAAL,CAAWH,IAArB,EAA2BU,GAA3B,CAAb;AACA,WAAKD,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAJA;AAAF,OAAd;AACA,WAAKD,QAAL,CAAcC,IAAd;AACD;;;WAED,kBAAU;AACR,0BAEE,QAAC,SAAD;AACE,QAAA,eAAe,EAAC,cADlB;AAEE,QAAA,GAAG,EAAE,KAAKH,SAFZ;AAGE,QAAA,IAAI,EAAE,KAAKM,KAAL,CAAWH,IAHnB;AAIE,QAAA,WAAW,EAAE,KAAKG,KAAL,CAAWC,WAJ1B;AAKE,QAAA,QAAQ,EAAE,KAAKQ,QAAL,CAAcV,IAAd,CAAmB,IAAnB,CALZ;AAME,QAAA,UAAU,EAAE,KAAKW,UAAL,CAAgBX,IAAhB,CAAqB,IAArB,CANd;AAOE,QAAA,QAAQ,EAAE,IAPZ;AAQE,QAAA,UAAU,EAAC;AARb;AAAA;AAAA;AAAA;AAAA,cAFF;AAeD;;;;EApGsBf,KAAK,CAAC2B,S;;AAwG/B,eAAexB,UAAf","sourcesContent":["import React from 'react'\r\nimport ReactTags from 'react-tag-autocomplete'\r\nimport './css/searchbar.css';\r\nimport axios from 'axios';\r\n\r\n\r\n//https://www.npmjs.com/package/react-tag-autocomplete\r\nclass SearchText extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.sendData = this.sendData.bind(this)\r\n    this.state = {\r\n      text: [     \r\n      ],\r\n      suggestions: [\r\n       \r\n      ]\r\n    }\r\n  \r\n    this.getText();\r\n\r\n  }\r\n\r\n  getText = () => {\r\n    var i = 1;\r\n    var j = 0;\r\n    var temp;\r\n    var strings = [];\r\n    /*\r\n    const data = this.props.allText.data;\r\n    //var temp =data[0]._id.processed_text[0].split(\" \")\r\n    \r\n    var tempSuggestion = []\r\n \r\n    while(i<data.length){\r\n      j=0;\r\n      \r\n      if(data[i]._id!==undefined&&data[i]._id!==null){\r\n       \r\n      while(j<data[i]._id.processed_text.length){\r\n        \r\n        temp=data[i]._id.processed_text[j].split(\" \")\r\n\r\n        if(strings.indexOf(temp[0])==-1){\r\n          tempSuggestion.push({\r\n            id:0,\r\n            name: temp[0]      \r\n          });\r\n          strings.push(temp[0]);\r\n        }\r\n\r\n\r\n        j++;\r\n      }\r\n    }\r\n\r\n        i++;\r\n    }\r\n    \r\n   \r\n    this.state.suggestions = tempSuggestion\r\n    this.setState({suggestions: tempSuggestion})        \r\n           */\r\n\r\nthis.reactTags = React.createRef()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(prevProps.mongodb!==this.props.mongodb){\r\n      this.getText();\r\n    }\r\n    \r\n  }\r\n\r\n  sendData = (text) =>{\r\n    this.props.parentCallback(text);\r\n  }\r\n\r\n  onDelete (i) {\r\n    const text = this.state.text.slice(0)\r\n    text.splice(i, 1)\r\n    this.setState({ text })\r\n    this.sendData(text)\r\n  }\r\n\r\n  onAddition (tag) {\r\n    const text = [].concat(this.state.text, tag)\r\n    this.setState({ text })\r\n    this.sendData(text)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n     \r\n      <ReactTags\r\n        placeholderText=\"Add new Text\"\r\n        ref={this.reactTags}\r\n        tags={this.state.text}\r\n        suggestions={this.state.suggestions}\r\n        onDelete={this.onDelete.bind(this)}\r\n        onAddition={this.onAddition.bind(this)} \r\n        allowNew={true}\r\n        classNames=\"search\"\r\n        />\r\n     \r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default SearchText"]},"metadata":{},"sourceType":"module"}