{"ast":null,"code":"'use strict';\n\nif (typeof module !== 'undefined') module.exports = simpleheat;\n\nfunction simpleheat(canvas) {\n  if (!(this instanceof simpleheat)) return new simpleheat(canvas);\n  this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;\n  this._ctx = canvas.getContext('2d');\n  this._width = canvas.width;\n  this._height = canvas.height;\n  this._max = 1;\n  this._data = [];\n}\n\nsimpleheat.prototype = {\n  defaultRadius: 25,\n  defaultGradient: {\n    0.4: 'blue',\n    0.6: 'cyan',\n    0.7: 'lime',\n    0.8: 'yellow',\n    1.0: 'red'\n  },\n  data: function data(_data) {\n    this._data = _data;\n    return this;\n  },\n  max: function max(_max) {\n    this._max = _max;\n    return this;\n  },\n  add: function add(point) {\n    this._data.push(point);\n\n    return this;\n  },\n  clear: function clear() {\n    this._data = [];\n    return this;\n  },\n  radius: function radius(r, blur) {\n    blur = blur === undefined ? 15 : blur; // create a grayscale blurred circle image that we'll use for drawing points\n\n    var circle = this._circle = this._createCanvas(),\n        ctx = circle.getContext('2d'),\n        r2 = this._r = r + blur;\n\n    circle.width = circle.height = r2 * 2;\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n    return this;\n  },\n  resize: function resize() {\n    this._width = this._canvas.width;\n    this._height = this._canvas.height;\n  },\n  gradient: function gradient(grad) {\n    // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one\n    var canvas = this._createCanvas(),\n        ctx = canvas.getContext('2d'),\n        gradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n    canvas.width = 1;\n    canvas.height = 256;\n\n    for (var i in grad) {\n      gradient.addColorStop(+i, grad[i]);\n    }\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, 1, 256);\n    this._grad = ctx.getImageData(0, 0, 1, 256).data;\n    return this;\n  },\n  draw: function draw(minOpacity) {\n    if (!this._circle) this.radius(this.defaultRadius);\n    if (!this._grad) this.gradient(this.defaultGradient);\n    var ctx = this._ctx;\n    ctx.clearRect(0, 0, this._width, this._height); // draw a grayscale heatmap by putting a blurred circle at each data point\n\n    for (var i = 0, len = this._data.length, p; i < len; i++) {\n      p = this._data[i];\n      ctx.globalAlpha = Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity);\n      ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);\n    } // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient\n\n\n    var colored = ctx.getImageData(0, 0, this._width, this._height);\n\n    this._colorize(colored.data, this._grad);\n\n    ctx.putImageData(colored, 0, 0);\n    return this;\n  },\n  _colorize: function _colorize(pixels, gradient) {\n    for (var i = 0, len = pixels.length, j; i < len; i += 4) {\n      j = pixels[i + 3] * 4; // get gradient color from opacity value\n\n      if (j) {\n        pixels[i] = gradient[j];\n        pixels[i + 1] = gradient[j + 1];\n        pixels[i + 2] = gradient[j + 2];\n      }\n    }\n  },\n  _createCanvas: function _createCanvas() {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else {\n      // create a new canvas instance in node.js\n      // the canvas class needs to have a default constructor without any parameter\n      return new this._canvas.constructor();\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/simpleheat/simpleheat.js"],"names":["module","exports","simpleheat","canvas","_canvas","document","getElementById","_ctx","getContext","_width","width","_height","height","_max","_data","prototype","defaultRadius","defaultGradient","data","max","add","point","push","clear","radius","r","blur","undefined","circle","_circle","_createCanvas","ctx","r2","_r","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","arc","Math","PI","closePath","fill","resize","gradient","grad","createLinearGradient","i","addColorStop","fillStyle","fillRect","_grad","getImageData","draw","minOpacity","clearRect","len","length","p","globalAlpha","drawImage","colored","_colorize","putImageData","pixels","j","createElement","constructor"],"mappings":"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","sourcesContent":["'use strict';\n\nif (typeof module !== 'undefined') module.exports = simpleheat;\n\nfunction simpleheat(canvas) {\n    if (!(this instanceof simpleheat)) return new simpleheat(canvas);\n\n    this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;\n\n    this._ctx = canvas.getContext('2d');\n    this._width = canvas.width;\n    this._height = canvas.height;\n\n    this._max = 1;\n    this._data = [];\n}\n\nsimpleheat.prototype = {\n\n    defaultRadius: 25,\n\n    defaultGradient: {\n        0.4: 'blue',\n        0.6: 'cyan',\n        0.7: 'lime',\n        0.8: 'yellow',\n        1.0: 'red'\n    },\n\n    data: function (data) {\n        this._data = data;\n        return this;\n    },\n\n    max: function (max) {\n        this._max = max;\n        return this;\n    },\n\n    add: function (point) {\n        this._data.push(point);\n        return this;\n    },\n\n    clear: function () {\n        this._data = [];\n        return this;\n    },\n\n    radius: function (r, blur) {\n        blur = blur === undefined ? 15 : blur;\n\n        // create a grayscale blurred circle image that we'll use for drawing points\n        var circle = this._circle = this._createCanvas(),\n            ctx = circle.getContext('2d'),\n            r2 = this._r = r + blur;\n\n        circle.width = circle.height = r2 * 2;\n\n        ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n        ctx.shadowBlur = blur;\n        ctx.shadowColor = 'black';\n\n        ctx.beginPath();\n        ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n        ctx.closePath();\n        ctx.fill();\n\n        return this;\n    },\n\n    resize: function () {\n        this._width = this._canvas.width;\n        this._height = this._canvas.height;\n    },\n\n    gradient: function (grad) {\n        // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one\n        var canvas = this._createCanvas(),\n            ctx = canvas.getContext('2d'),\n            gradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n        canvas.width = 1;\n        canvas.height = 256;\n\n        for (var i in grad) {\n            gradient.addColorStop(+i, grad[i]);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, 1, 256);\n\n        this._grad = ctx.getImageData(0, 0, 1, 256).data;\n\n        return this;\n    },\n\n    draw: function (minOpacity) {\n        if (!this._circle) this.radius(this.defaultRadius);\n        if (!this._grad) this.gradient(this.defaultGradient);\n\n        var ctx = this._ctx;\n\n        ctx.clearRect(0, 0, this._width, this._height);\n\n        // draw a grayscale heatmap by putting a blurred circle at each data point\n        for (var i = 0, len = this._data.length, p; i < len; i++) {\n            p = this._data[i];\n            ctx.globalAlpha = Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity);\n            ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);\n        }\n\n        // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient\n        var colored = ctx.getImageData(0, 0, this._width, this._height);\n        this._colorize(colored.data, this._grad);\n        ctx.putImageData(colored, 0, 0);\n\n        return this;\n    },\n\n    _colorize: function (pixels, gradient) {\n        for (var i = 0, len = pixels.length, j; i < len; i += 4) {\n            j = pixels[i + 3] * 4; // get gradient color from opacity value\n\n            if (j) {\n                pixels[i] = gradient[j];\n                pixels[i + 1] = gradient[j + 1];\n                pixels[i + 2] = gradient[j + 2];\n            }\n        }\n    },\n\n    _createCanvas: function () {\n        if (typeof document !== 'undefined') {\n            return document.createElement('canvas');\n        } else {\n            // create a new canvas instance in node.js\n            // the canvas class needs to have a default constructor without any parameter\n            return new this._canvas.constructor();\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}