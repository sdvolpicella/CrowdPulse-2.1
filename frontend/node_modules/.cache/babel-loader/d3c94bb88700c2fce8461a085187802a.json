{"ast":null,"code":"import _objectSpread from \"C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\giovt\\\\Desktop\\\\crowdpulse old\\\\CrowdPulse\\\\frontend\\\\src\\\\components\\\\Table\\\\TweetsTable.js\",\n    _this = this;\n\nimport React, { useState } from \"react\";\nimport \"./table.css\";\nimport Table from \".\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar exportData = [];\nvar columns = [{\n  title: \"username\",\n  field: \"author_username\"\n}, {\n  title: \"text\",\n  field: \"raw_text\"\n}, {\n  title: \"tags\",\n  field: \"tags\"\n}];\n\nvar setData = function setData(props) {\n  var i = 0;\n\n  while (i < props.data.length) {\n    exportData.push({\n      author_username: props.data[i].author_username,\n      raw_text: props.data[i].raw_text,\n      tags: printTags(props.data[i])\n    });\n    i++;\n  }\n};\n\nvar downloadExcel = function downloadExcel() {\n  var newData = exportData.map(function (row) {\n    delete row.tableData;\n    return row;\n  });\n  var workSheet = XLSX.utils.json_to_sheet(newData);\n  var workBook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workBook, workSheet, \"students\"); //Buffer\n\n  XLSX.write(workBook, {\n    bookType: \"xlsx\",\n    type: \"buffer\"\n  }); //Binary string\n\n  XLSX.write(workBook, {\n    bookType: \"xlsx\",\n    type: \"binary\"\n  }); //Download\n\n  XLSX.writeFile(workBook, \"TweetData.xlsx\");\n};\n\nvar printTags = function printTags(data) {\n  var i = 0;\n  var temp;\n  var tags = [];\n\n  if (data.tags !== undefined) {\n    while (i < data.tags.tag_me.length) {\n      temp = data.tags.tag_me[i].split(\" : \");\n      tags = tags + \",\" + temp[0];\n      i++;\n    }\n\n    return tags;\n  } else {\n    return \"\";\n  }\n};\n\nvar downloadPdf = function downloadPdf() {\n  var doc = new jsPDF('landscape');\n  console.log(exportData);\n  doc.text(\"Tweet Details\", 20, 10);\n  doc.autoTable({\n    theme: \"grid\",\n    columns: columns.map(function (col) {\n      return _objectSpread(_objectSpread({}, col), {}, {\n        dataKey: col.field\n      });\n    }),\n    body: exportData\n  });\n  doc.save('table.pdf');\n};\n\nvar DisplayTable = function DisplayTable(props) {\n  setData(props);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container_table\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button activeButton\",\n      onClick: function onClick() {\n        downloadPdf();\n      },\n      children: \" Export Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button activeButton\",\n      onClick: function onClick() {\n        downloadExcel();\n      },\n      children: \" Export Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_table\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        data: props.data,\n        rowsPerPage: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = DisplayTable;\nexport default DisplayTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTable\");","map":{"version":3,"sources":["C:/Users/giovt/Desktop/crowdpulse old/CrowdPulse/frontend/src/components/Table/TweetsTable.js"],"names":["React","useState","Table","jsPDF","XLSX","exportData","columns","title","field","setData","props","i","data","length","push","author_username","raw_text","tags","printTags","downloadExcel","newData","map","row","tableData","workSheet","utils","json_to_sheet","workBook","book_new","book_append_sheet","write","bookType","type","writeFile","temp","undefined","tag_me","split","downloadPdf","doc","console","log","text","autoTable","theme","col","dataKey","body","save","DisplayTable"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\nimport \"./table.css\";\r\nimport Table from \".\";\r\nimport jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\nimport XLSX from 'xlsx'\r\n\r\nvar exportData=[];\r\nconst columns = [\r\n  { title: \"username\", field: \"author_username\", },\r\n  { title: \"text\", field: \"raw_text\", },\r\n  { title: \"tags\", field: \"tags\",  }]\r\n\r\nconst setData = (props) =>{\r\n \r\n  var i = 0\r\n  while (i<props.data.length) {\r\n    exportData.push({\r\n      author_username:props.data[i].author_username,\r\n      raw_text:props.data[i].raw_text,\r\n      tags:printTags(props.data[i])\r\n    })\r\n    i++\r\n  }  \r\n}\r\n\r\nconst downloadExcel = () => {\r\n  const newData = exportData.map(row => {\r\n    delete row.tableData\r\n    return row\r\n  })\r\n  const workSheet = XLSX.utils.json_to_sheet(newData)\r\n  const workBook = XLSX.utils.book_new()\r\n  XLSX.utils.book_append_sheet(workBook, workSheet, \"students\")\r\n  //Buffer\r\n  XLSX.write(workBook, { bookType: \"xlsx\", type: \"buffer\" })\r\n  //Binary string\r\n  XLSX.write(workBook, { bookType: \"xlsx\", type: \"binary\" })\r\n  //Download\r\n  XLSX.writeFile(workBook, \"TweetData.xlsx\")\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  const printTags = (data) =>{\r\n    var i = 0\r\n    var temp \r\n     var tags = []\r\n    \r\n     if(data.tags!==undefined){\r\n\r\n     while(i<data.tags.tag_me.length){\r\n        temp = data.tags.tag_me[i].split(\" : \")\r\n        tags = tags+\",\"+temp[0]\r\n        i++\r\n    }\r\n    return tags\r\n\r\n     }else{\r\n       return(\r\n         \"\"\r\n       )\r\n     }\r\n  \r\n    \r\n  }\r\n\r\nconst downloadPdf = () => {\r\n  const doc = new jsPDF('landscape')\r\n\r\n  console.log(exportData)\r\n  doc.text(\"Tweet Details\", 20, 10)\r\n  doc.autoTable({\r\n    theme: \"grid\",\r\n    columns: columns.map(col => ({ ...col, dataKey: col.field })),\r\n    body: exportData\r\n  })\r\n  doc.save('table.pdf')\r\n}\r\n\r\nconst DisplayTable = (props) => {\r\n  setData(props)\r\n  return (\r\n    <main className=\"container_table\">\r\n      <button className='button activeButton' onClick={() => {downloadPdf()}} > Export Table</button>\r\n      <button className='button activeButton' onClick={() => {downloadExcel()}} > Export Excel</button>\r\n      <br/><br/><br/>\r\n      <div className=\"wrapper_table\">\r\n        <Table data={props.data} rowsPerPage={100} />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DisplayTable;"]},"metadata":{},"sourceType":"module"}